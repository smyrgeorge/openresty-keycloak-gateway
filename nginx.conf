events {
    worker_connections 1024;
}

http {

    lua_package_path '~/lua/?.lua;;';

    resolver 8.8.8.8;

    lua_ssl_trusted_certificate /etc/ssl/certs/ca-certificates.crt;
    lua_ssl_verify_depth 5;

    # cache for JWT verification results
  	lua_shared_dict introspection 10m;

    server {
        
        listen       8000 default_server;
        listen       [::]:8000 default_server;
        # root         /usr/share/nginx/html;

        # disbled caching so the browser won't cache the site.
        expires           0;
        add_header        Cache-Control private;

        access_by_lua_block {

        	-- perform base64 encoding
			local function toBase64(input)
  				local output = ngx.encode_base64(input, true)
  				return output:gsub('%+', '-'):gsub('/', '_')
			end

			-- serialize to json
			local function toJson(input)
				return require("cjson").encode(input)
			end

			-- construct token (X-Real-Name header)
			local function toToken(res)

				local function roleOf(role)
					return "ROLE_" .. role:upper()
				end

				local function map(func, array)
			  		local new_array = {}
			  		for i,v in ipairs(array) do
		    			new_array[i] = func(v)
			  		end
			  		return new_array
				end

				local token = {
	          		uuid = res.sub,
	          		username = res.preferred_username,
	          		email = res.email,
	          		first_name = res.given_name,
	          		last_name = res.family_name,
	          		roles = map(roleOf, res.realm_access.roles)
	          	}

				return toBase64(toJson(token))
			end



            local keycloak_url = "https://sso.bevica.gr"

          	local opts = {
            	client_id = "openresty",
            	discovery = keycloak_url .. "/auth/realms/taxic/.well-known/openid-configuration",
        
            	-- IN PRODUCTION SET TO YES
            	ssl_verify = "no",
          	}

          	-- call bearer_jwt_verify to verify JWT signature
          	local res, err = require("resty.openidc").bearer_jwt_verify(opts)

          	if err then
            	ngx.status = 401
            	ngx.say(err)
            	ngx.exit(ngx.HTTP_UNAUTHORIZED)
          	end
          	
          	-- set X-Real-Name headers with user info
          	ngx.req.set_header("X-Real-Name", toToken(res))
        }

        # proxy locations
        location / {
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # reemove Authorization header
            proxy_set_header Authorization "";

            # http-echo-server (npm i -g http-echo-server)
            proxy_pass http://host.docker.internal:3000/;
        }
    }
}
